/**
 * Generate a not repeated new id combined with random a-z, A-Z, 0-9
 * @param length - length of generated id
 * @param ids - existing ids, need to check if new id is repeated
 * @returns {string} a new id with a-z, A-Z, 0-9, and won't repeated from param ids
 */
export function generateNotRepeatedId(length: number, ids: string[]): string {
  // Search time complexity of Set is O(1), better than Array(O(n))
  const existingIds = new Set(ids);
  let newId: string;
  do {
    newId = generateRandomId(length);
  } while (existingIds.has(newId));

  return newId;
};

/**
 * Generate a new id combined with random a-z, A-Z, 0-9
 * @param length - length of generated id
 * @returns {string} a id with random a-z, A-Z, 0-9
 */
export function generateRandomId(length: number): string {

  function getRandomLetter() {
    enum LetterType {
      Number = 0,
      UpperCase = 1,
      LowerCase = 2,
    };
    // char code ranges, using count as weight
    const charRanges = [
      { type: LetterType.Number, start: 48, count: 10 },
      { type: LetterType.UpperCase, start: 65, count: 26 },
      { type: LetterType.LowerCase, start: 97, count: 26 },
    ];

    const totalWeight = charRanges.reduce((acc, cur) => { return acc + cur.count }, 0);
    const randomWeight = Math.floor(Math.random() * totalWeight);
    // use accumulateWeight and randomWeight to decide LetterType, weighty and randomly
    let accumulatedWeight = 0;
    for (const { start, count } of charRanges) {
      accumulatedWeight += count;
      if (randomWeight < accumulatedWeight) {
        const charCode = Math.floor(Math.random() * count + start);
        return String.fromCharCode(charCode);
      }
    };
    // prevent undefined being returned, function should return before this line.
    return '';
  };

  // return a string randomly generated by getRandomLetter, length equal to @param {number} length
  return Array(length).fill('').map(getRandomLetter).join('');
};
